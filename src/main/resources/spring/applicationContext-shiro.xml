<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:couchdb="http://www.ektorp.org/schema/couchdb"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.1.xsd
                        http://www.ektorp.org/schema/couchdb
                        http://www.ektorp.org/schema/couchdb/couchdb.xsd
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
                        http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.1.xsd" >

	<description>Shiro Configuration</description>
	
	<!-- Activates scanning of @Autowired -->
	<context:annotation-config />

	<!-- Activates scanning of @Repository and @Service -->
	<context:component-scan base-package="com.ctsig" />

    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath*:conf/application.properties" />
	<aop:aspectj-autoproxy proxy-target-class="true"/>
<!-- 	<bean id="formAuthenticationFilter" class="com.ctsig.common.security.FormAuthenticationFilter"/> -->
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->  
		<property name="loginUrl" value="/login.jsp" />
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在UserController里硬编码为main.jsp了) -->  
	    <!-- <property name="successUrl" value="/index.jsp"/> -->  
	    <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
	    <property name="unauthorizedUrl" value="/error/unauthorized.jsp"/> 
	    <!-- 用户自定义filter -->
  		<property name="filters"> 
             <map>
                 <entry key="authc" value-ref="captchaFormAuthenticationFilter"/> 
                 <entry key="authc" value-ref="formAuthenticationFilter"/>
             </map>
         </property>
        <!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
	    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
	    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
		<property name="filterChainDefinitions">
			<value>
				/services/** = anon
				/login.jsp* = anon
				/validatecode.jsp* = anon
				/oper/user/validationUser.do* = anon
				/common/** = anon
				/oper/**=authc
				/oper/user/** = authc
 				/** = user
<!-- 				/oper/user/*=roles[admin] -->
<!-- 				/oper/role/* = perms[admin:rolelsit] -->
<!-- 				/oper/user/topermissionInfo.do =  perms[permission:permission] -->
		 	</value>
		</property>
	</bean>
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->  
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->  
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
<!-- 		<property name="sessionManager" ref="sessionManager" /> -->
		<property name="realm" ref="myRealm" />
  		<property name="cacheManager" ref="shiroCacheManager" /> 
  		<property name="rememberMeManager" ref="rememberMeManager"/>
	</bean>
	
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的SystemAuthorizingRealm.java -->  
	<bean id="myRealm" class="com.ctsig.common.security.SystemAuthorizingRealm" >
	 	<property name="authorizationCacheName" value="shiro"/>
	</bean>
<!-- 	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager" >       -->
<!-- 		<property name = "sessionDAO" ref ="sessionDAO"/>       -->
<!-- 		<property name = "globalSessionTimeout" value ="1800000" />  -->
<!-- 	</bean >  -->
 	<!-- session持久化 --> 
<!-- 	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO" ></bean> -->
	<!-- 开启Shiro的注解  与springmvc整合需将下面这俩个配置放到springmvc的配置文件中才起作用-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">  
            <property name="proxyTargetClass" value="true" />   
   </bean>
   
   <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
	    <constructor-arg value="sid"/>  
	    <property name="httpOnly" value="true"/>  
	    <property name="maxAge" value="-1"/>  
	</bean>  
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">  
	    <constructor-arg value="rememberMe"/>  
	    <property name="httpOnly" value="true"/>  
	    <property name="maxAge" value="2592000"/><!-- 30天 -->  
	</bean>
	<!-- rememberMe管理器 -->  
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">  
	    <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>  
	    <property name="cookie" ref="rememberMeCookie"/>  
	</bean>
</beans>
  